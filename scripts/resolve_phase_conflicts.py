#!/usr/bin/env python3
import os
import subprocess
import re

# üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
def get_conflicted_files():
    result = subprocess.run(['git', 'diff', '--name-only', '--diff-filter=U'], capture_output=True, text=True)
    return result.stdout.strip().split('\n')

# üß† –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ –±–ª–æ–∫–∏
def highlight_conflicts(file_path):
    print(f"\nüß© –§–∞–π–ª: {file_path}")
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    conflict_block = []
    in_conflict = False
    for line in lines:
        if line.startswith('<<<<<<<'):
            in_conflict = True
            conflict_block = [line]
        elif line.startswith('>>>>>>>'):
            conflict_block.append(line)
            in_conflict = False
            print("üîª –ö–æ–Ω—Ñ–ª–∏–∫—Ç:")
            for l in conflict_block:
                print(f"  {l.strip()}")
        elif in_conflict:
            conflict_block.append(line)

# üß© –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —à–∞–±–ª–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
def suggest_resolution():
    print("\nüìå –®–∞–±–ª–æ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
    print("  [1] –û—Å—Ç–∞–≤–∏—Ç—å HEAD (—Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é)")
    print("  [2] –û—Å—Ç–∞–≤–∏—Ç—å –≤—Ö–æ–¥—è—â—É—é –≤–µ—Ä—Å–∏—é")
    print("  [3] –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é")
    print("  [4] –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Ñ–∞–π–ª—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ç–æ–ª—å–∫–æ HEAD)")

def apply_head_version(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –£–¥–∞–ª–∏—Ç—å –≤—Ö–æ–¥—è—â—É—é –≤–µ—Ä—Å–∏—é –∏ –º–∞—Ä–∫–µ—Ä—ã
    resolved = re.sub(r'<<<<<<< HEAD\n(.*?)\n=======\n.*?\n>>>>>>>.*?\n', r'\1\n', content, flags=re.DOTALL)

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(resolved)

    subprocess.run(['git', 'add', file_path])
    print(f"‚úÖ HEAD –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {file_path}")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    files = get_conflicted_files()
    if not files or files == ['']:
        print("‚úÖ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    for file in files:
        highlight_conflicts(file)
        suggest_resolution()
        choice = input(f"–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –¥–ª—è {file} [1-4]: ").strip()
        if choice == '4':
            apply_head_version(file)

    print("\nüì¶ –ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –∑–∞–ø—É—Å—Ç–∏:")
    print("  git rebase --continue")

if __name__ == "__main__":
    main()
