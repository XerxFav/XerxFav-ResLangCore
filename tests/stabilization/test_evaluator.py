#üîπ tests/test_evaluator.py ‚Äî —Ñ–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è

#–æ—Ñ–æ—Ä–º–∏–º tests/test_evaluator.py –∫–∞–∫ —Ñ–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞. –û–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ schema.py, –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å #PhaseEvaluator. –ú—ã –≤—Å—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—é, —Ñ–∞–∑–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—à–∏–±–æ–∫.
#
import pytest
from arca_interpreter.evaluator import PhaseEvaluator

@pytest.mark.phase
@pytest.mark.parametrize("initial,target,expected", [
    ("neutral", "positive", "Transitioned to positive"),
    ("positive", "neutral", "Transitioned to neutral"),
    ("negative", "positive", "Transitioned to positive"),
    ("positive", "undefined", "Invalid transition from positive to undefined"),
    ("neutral", "neutral", "Invalid transition from neutral to neutral"),
])
def test_phase_evaluation(initial, target, expected):
    evaluator = PhaseEvaluator(initial)
    result = evaluator.evaluate(target)
    assert result == expected
#
#‚úÖ –ß—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç

#   üîÅ –ü—Ä–æ–≤–µ—Ä–∫—É –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (neutral ‚Üí positive)

#  ‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (positive ‚Üí undefined)

# üîÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ

#üìå –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å schema.py —á–µ—Ä–µ–∑ is_valid_transition

#